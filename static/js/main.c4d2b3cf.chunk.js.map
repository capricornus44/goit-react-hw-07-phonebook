{"version":3,"sources":["redux/phonebook/actions/contact-action.js","redux/phonebook/reducers/contact-reducer.js","redux/phonebook/reducers/root-reducer.js","redux/store.js","redux/phonebook/selectors/contact-selectors.js","components/form/Form.js","redux/phonebook/operations/contacts-operations.js","components/filter/Filter.js","components/singleContact/SingleContact.js","components/contactList/ContactList.js","components/app/App.js","index.js"],"names":["getContactsRequest","createAction","getContactsSuccess","getContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","filterContact","payload","target","value","items","createReducer","_","state","filter","contact","id","combineReducers","store","configureStore","reducer","contacts","rootReducer","devTools","process","itemsSelector","filterSelector","getFilteredContact","createSelector","normalizedFilter","toLowerCase","name","includes","getContactById","contactId","find","initState","number","Form","handlerChange","setState","handlerSubmit","event","preventDefault","props","toast","error","addContact","this","className","onSubmit","type","pattern","placeholder","title","required","onChange","Component","mapDispatchToProps","dispatch","a","axios","post","response","data","connect","ownProps","deleteContact","delete","onClick","aria-hidden","TransitionGroup","component","map","CSSTransition","classNames","timeout","App","animation","onGetContacts","in","appear","unmountOnExit","length","autoClose","position","get","Object","keys","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c4d2b3cf.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\"\r\n\r\nexport const getContactsRequest = createAction('@contact/getRequest');\r\nexport const getContactsSuccess = createAction('@contact/getSuccess');\r\nexport const getContactsError = createAction('@contact/getError');\r\n\r\nexport const addContactRequest = createAction('@contact/addRequest');\r\nexport const addContactSuccess = createAction('@contact/addSuccess');\r\nexport const addContactError = createAction('@contact/addError');\r\n\r\nexport const deleteContactRequest = createAction('@contact/deleteRequest');\r\nexport const deleteContactSuccess = createAction('@contact/deleteSuccess');\r\nexport const deleteContactError = createAction('@contact/deleteError');\r\n\r\nexport const filterContact = createAction('@contact/filter', ({ target }) => ({\r\n  payload: target.value,\r\n}));\r\n\r\n\r\n\r\n","import { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  getContactsSuccess,\r\n  addContactSuccess,\r\n  deleteContactSuccess,\r\n  filterContact,\r\n} from '../actions/contact-action';\r\n\r\nconst items = createReducer([], {\r\n  [getContactsSuccess]: (_, { payload }) => [...payload],\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [deleteContactSuccess]: (state, { payload }) =>\r\n    state.filter(contact => contact.id !== payload),\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [filterContact]: (_, { payload }) => payload,\r\n});\r\n\r\nexport { items, filter };\r\n","import { combineReducers } from \"redux\";\r\nimport { items, filter } from \"../reducers/contact-reducer\";\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport rootReducer from './phonebook/reducers/root-reducer';\r\n\r\nconst store = configureStore({\r\n  reducer: { contacts: rootReducer },\r\n  devTools: process.env.NODE_ENV !== 'production',\r\n});\r\n\r\nexport default store;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nexport const itemsSelector = state => state.contacts.items;\r\nexport const filterSelector = state => state.contacts.filter;\r\n\r\nexport const getFilteredContact = createSelector(\r\n  [itemsSelector, filterSelector],\r\n  (items, filter) => {\r\n    const normalizedFilter = filter.toLowerCase();\r\n    return items.filter(contact =>\r\n      contact.name.toLowerCase().includes(normalizedFilter),\r\n    );\r\n  },\r\n);\r\n\r\nexport const getContactById = createSelector(\r\n  [itemsSelector, (_, contactId) => contactId],\r\n  (items, contactId) => items.find(contact => contact.id === contactId),\r\n);\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { toast } from 'react-toastify';\r\nimport PropTypes from 'prop-types';\r\nimport { addContact } from '../../redux/phonebook/operations/contacts-operations';\r\nimport {\r\n  filterSelector,\r\n  itemsSelector,\r\n} from '../../redux/phonebook/selectors/contact-selectors';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport './Form.scss';\r\n\r\nconst initState = {\r\n  name: '',\r\n  number: '',\r\n};\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    ...initState,\r\n  };\r\n\r\n  handlerChange = ({ target }) => {\r\n    const { value, name } = target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handlerSubmit = event => {\r\n    event.preventDefault();\r\n\r\n    const { name, number } = this.state;\r\n    const contact = { name, number };\r\n    const { contacts } = this.props;\r\n    const isExists = contacts.find(\r\n      contact => contact.name.toLowerCase() === name.toLowerCase(),\r\n    );\r\n\r\n    if (isExists) {\r\n      toast.error('This contact is already exist');\r\n      return this.setState({ ...initState });\r\n    }\r\n\r\n    this.props.addContact(contact);\r\n    this.setState({ ...initState });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <form className=\"form\" onSubmit={this.handlerSubmit}>\r\n          <label className=\"form_label\">\r\n            Name\r\n            <input\r\n              className=\"form_input\"\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={name}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              placeholder=\"John Smith\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              onChange={this.handlerChange}\r\n            />\r\n          </label>\r\n          <label className=\"form_label\">\r\n            Number\r\n            <input\r\n              className=\"form_input\"\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={number}\r\n              pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{3})\"\r\n              placeholder=\"+48-796-287-373\"\r\n              title=\"Номер телефона должен состоять из 11-12 цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n              required\r\n              onChange={this.handlerChange}\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className=\"form_button\">\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  contacts: itemsSelector(state),\r\n  filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addContact,\r\n};\r\n\r\nForm.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n  addContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\n","import axios from 'axios';\r\nimport {\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  deleteContactRequest,\r\n  deleteContactSuccess,\r\n  deleteContactError,\r\n} from '../actions/contact-action';\r\n\r\nexport const getContacts = () => async dispatch => {\r\n  dispatch(getContactsRequest());\r\n  try {\r\n    const response = await axios.get(\r\n      `https://phonebook-react-default-rtdb.firebaseio.com/contacts.json`,\r\n    );\r\n    const contacts = Object.keys(response.data).map(key => ({\r\n      id: key,\r\n      ...response.data[key],\r\n    }));\r\n    contacts && dispatch(getContactsSuccess(contacts));\r\n  } catch (error) {\r\n    dispatch(getContactsError(error));\r\n  }\r\n};\r\n\r\nexport const addContact = contact => async dispatch => {\r\n  dispatch(addContactRequest());\r\n  try {\r\n    const response = await axios.post(\r\n      `https://phonebook-react-default-rtdb.firebaseio.com/contacts.json`,\r\n      contact,\r\n    );\r\n    response.data &&\r\n      dispatch(addContactSuccess({ id: response.data.name, ...contact }));\r\n  } catch (error) {\r\n    dispatch(addContactError(error));\r\n  }\r\n};\r\n\r\nexport const deleteContact = id => async dispatch => {\r\n  dispatch(deleteContactRequest());\r\n  try {\r\n    await axios.delete(\r\n      `https://phonebook-react-default-rtdb.firebaseio.com/contacts/${id}.json`,\r\n    );\r\n    dispatch(deleteContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(deleteContactError(error));\r\n  }\r\n};\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { filterContact } from '../../redux/phonebook/actions/contact-action';\r\nimport { filterSelector } from '../../redux/phonebook/selectors/contact-selectors';\r\nimport './Filter.scss';\r\n\r\nconst Filter = ({ filter, filterContact }) => {\r\n  return (\r\n    <div className=\"filter_container\">\r\n      <label className=\"filter_label\">\r\n        Filter\r\n        <input\r\n          className=\"filter_input\"\r\n          type=\"text\"\r\n          name=\"filter\"\r\n          placeholder=\"Find contacts by name\"\r\n          value={filter}\r\n          onChange={filterContact}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => ({\r\n  filter: filterSelector(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  filterContact,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n\r\nFilter.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }).isRequired,\r\n  ),\r\n  filter: PropTypes.string.isRequired,\r\n  filterContact: PropTypes.func.isRequired,\r\n};\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { deleteContact } from '../../redux/phonebook/operations/contacts-operations';\r\nimport { getContactById } from '../../redux/phonebook/selectors/contact-selectors';\r\nimport './SingleContact.scss';\r\n\r\nconst SingleContact = ({ name, number, deleteContact }) => {\r\n  return (\r\n    <li className=\"contact\">\r\n      <h4>{name}</h4>\r\n      <p className=\"contact_number\">{number}</p>\r\n      <button className=\"delete_button\" type=\"button\" onClick={deleteContact}>\r\n        <i className=\"fa fa-trash\" aria-hidden=\"true\" />\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state, ownProps) => {\r\n  const contact = getContactById(state, ownProps.id);\r\n  return { ...contact };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  deleteContact: () => dispatch(deleteContact(ownProps.id)),\r\n});\r\n\r\nSingleContact.propTypes = {\r\n  name: PropTypes.string,\r\n  number: PropTypes.string,\r\n  deleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SingleContact);\r\n","import { connect } from 'react-redux';\r\nimport PropTypes from 'prop-types';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport { getFilteredContact } from '../../redux/phonebook/selectors/contact-selectors';\r\nimport SingleContact from '../singleContact/SingleContact';\r\nimport './ContactList.scss';\r\n\r\nconst ContactList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className=\"contact_list\">\r\n      {contacts.map(({ id }) => (\r\n        <CSSTransition key={id} classNames=\"list_item\" timeout={250}>\r\n          <SingleContact id={id} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: getFilteredContact(state),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactList);\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      name: PropTypes.string,\r\n      id: PropTypes.string,\r\n      number: PropTypes.string,\r\n    }),\r\n  ).isRequired,\r\n};\r\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { ToastContainer } from 'react-toastify';\nimport { getContacts } from '../../redux/phonebook/operations/contacts-operations';\nimport { itemsSelector } from '../../redux/phonebook/selectors/contact-selectors';\nimport Form from '../form/Form';\nimport Filter from '../filter/Filter';\nimport ContactList from '../contactList/ContactList';\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    animation: false,\n  };\n\n  componentDidMount() {\n    this.props.onGetContacts();\n\n    this.setState(state => ({\n      animation: !state.animation,\n    }));\n  }\n\n  render() {\n    return (\n      <div className=\"app_container\">\n        {/* APPLICATION TITLE */}\n        <CSSTransition\n          in={true}\n          appear={true}\n          classNames=\"title_slider\"\n          timeout={500}\n          unmountOnExit\n        >\n          <h1 className=\"app_title\">Phonebook</h1>\n        </CSSTransition>\n\n        {/* APPLICATION FORM */}\n        <section className=\"section\">\n          <Form />\n        </section>\n\n        {/* CONTACTS FILTER */}\n        <CSSTransition\n          in={this.props.contacts.length > 1}\n          classNames=\"filter_animation\"\n          timeout={250}\n          unmountOnExit\n        >\n          <section className=\"section\">\n            <Filter />\n          </section>\n        </CSSTransition>\n\n        {/* CONTACTS LIST */}\n        <ContactList />\n\n        {/* ALERT NOTIFICATION */}\n        <ToastContainer autoClose={2500} position=\"top-right\" type=\"error\" />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  contacts: itemsSelector(state),\n});\n\nconst mapDispatchToProps = {\n  onGetContacts: getContacts,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport App from './components/app/App';\nimport './index.css';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}